// Code generated by MockGen. DO NOT EDIT.
// Source: ./resultdb/resultdb.go

// Package resultdb is a generated GoMock package.
package resultdb

import (
	reflect "reflect"

	common "chainmaker.org/chainmaker/pb-go/v2/common"
	store "chainmaker.org/chainmaker/pb-go/v2/store"
	serialization "chainmaker.org/chainmaker/store/v2/serialization"
	gomock "github.com/golang/mock/gomock"
)

// MockResultDB is a mock of ResultDB interface.
type MockResultDB struct {
	ctrl     *gomock.Controller
	recorder *MockResultDBMockRecorder
}

// MockResultDBMockRecorder is the mock recorder for MockResultDB.
type MockResultDBMockRecorder struct {
	mock *MockResultDB
}

// NewMockResultDB creates a new mock instance.
func NewMockResultDB(ctrl *gomock.Controller) *MockResultDB {
	mock := &MockResultDB{ctrl: ctrl}
	mock.recorder = &MockResultDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultDB) EXPECT() *MockResultDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResultDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockResultDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResultDB)(nil).Close))
}

// CommitBlock mocks base method.
func (m *MockResultDB) CommitBlock(blockInfo *serialization.BlockWithSerializedInfo, isCache bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlock", blockInfo, isCache)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitBlock indicates an expected call of CommitBlock.
func (mr *MockResultDBMockRecorder) CommitBlock(blockInfo, isCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockResultDB)(nil).CommitBlock), blockInfo, isCache)
}

// GetLastSavepoint mocks base method.
func (m *MockResultDB) GetLastSavepoint() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSavepoint")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSavepoint indicates an expected call of GetLastSavepoint.
func (mr *MockResultDBMockRecorder) GetLastSavepoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSavepoint", reflect.TypeOf((*MockResultDB)(nil).GetLastSavepoint))
}

// GetRWSetIndex mocks base method.
func (m *MockResultDB) GetRWSetIndex(txId string) (*store.StoreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRWSetIndex", txId)
	ret0, _ := ret[0].(*store.StoreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRWSetIndex indicates an expected call of GetRWSetIndex.
func (mr *MockResultDBMockRecorder) GetRWSetIndex(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRWSetIndex", reflect.TypeOf((*MockResultDB)(nil).GetRWSetIndex), txId)
}

// GetTxRWSet mocks base method.
func (m *MockResultDB) GetTxRWSet(txid string) (*common.TxRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWSet", txid)
	ret0, _ := ret[0].(*common.TxRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRWSet indicates an expected call of GetTxRWSet.
func (mr *MockResultDBMockRecorder) GetTxRWSet(txid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSet", reflect.TypeOf((*MockResultDB)(nil).GetTxRWSet), txid)
}

// InitGenesis mocks base method.
func (m *MockResultDB) InitGenesis(genesisBlock *serialization.BlockWithSerializedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGenesis", genesisBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockResultDBMockRecorder) InitGenesis(genesisBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockResultDB)(nil).InitGenesis), genesisBlock)
}

// RestoreBlocks mocks base method.
func (m *MockResultDB) RestoreBlocks(blockInfos []*serialization.BlockWithSerializedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBlocks", blockInfos)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBlocks indicates an expected call of RestoreBlocks.
func (mr *MockResultDBMockRecorder) RestoreBlocks(blockInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBlocks", reflect.TypeOf((*MockResultDB)(nil).RestoreBlocks), blockInfos)
}

// ShrinkBlocks mocks base method.
func (m *MockResultDB) ShrinkBlocks(txIdsMap map[uint64][]string, height uint64, bfdbPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShrinkBlocks", txIdsMap, height, bfdbPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShrinkBlocks indicates an expected call of ShrinkBlocks.
func (mr *MockResultDBMockRecorder) ShrinkBlocks(txIdsMap, height, bfdbPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShrinkBlocks", reflect.TypeOf((*MockResultDB)(nil).ShrinkBlocks), txIdsMap, height, bfdbPath)
}
